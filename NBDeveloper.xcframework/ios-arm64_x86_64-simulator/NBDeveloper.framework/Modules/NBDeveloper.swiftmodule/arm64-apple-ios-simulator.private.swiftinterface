// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name NBDeveloper
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import Foundation
@_exported import NBDeveloper
import NbmapCoreNavigation
import NbmapNavigation
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class DevLabel : UIKit.UILabel {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class DevContentView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class DevStyleMode {
  public static var isDarkMode: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class DeveloperOptionsViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency public var delegete: (any NBDeveloper.RecordToolDelegate)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CustomStyle : NbmapNavigation.DayStyle {
  @objc required dynamic public init()
  @objc override open func apply()
  @objc deinit
}
public protocol DeveloperSwitcherDelegate : AnyObject {
  func onDeveloperSwitcherChanged(value: Swift.Bool)
}
public struct DeveloperOptionsModel : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
extension NBDeveloper.DeveloperOptionsViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource, NBDeveloper.DeveloperSwitcherDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency public func onDeveloperSwitcherChanged(value: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, viewForFooterInSection section: Swift.Int) -> UIKit.UIView?
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
public protocol RecordToolDelegate : AnyObject {
  func onTapRecordingSwitcher()
  func onTapNavigationRecording()
}
@_hasMissingDesignatedInitializers open class DeveloperDataManager {
  @discardableResult
  public static func configRouteLineDataSource() -> [NBDeveloper.DeveloperOptionsModel]
  @discardableResult
  public static func configNavOptionsDataSource() -> [NBDeveloper.DeveloperOptionsModel]
  @discardableResult
  public static func configDevOptionsDataSource() -> [NBDeveloper.DeveloperOptionsModel]
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NBDeveloperLauncher {
  public static var shared: NBDeveloper.NBDeveloperLauncher
  public func getRouteLineStyleVC() -> UIKit.UIViewController
  public func getNavViewStyleVC() -> UIKit.UIViewController
  public func getDeveloperOptionsVC() -> UIKit.UIViewController
  @objc deinit
}
