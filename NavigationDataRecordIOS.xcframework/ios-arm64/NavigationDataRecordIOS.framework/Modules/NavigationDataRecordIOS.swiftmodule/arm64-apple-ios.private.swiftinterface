// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.21 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios13.2 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name NavigationDataRecordIOS
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1
import CoreLocation
import Foundation
import MMKV
import MapKit
import NbmapCoreNavigation
import NbmapNavigation
import Swift
import Turf
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol NavigationDataDelegate {
  func uploadFile(recordName: Swift.String, uploadStateDelegate: any NavigationDataRecordIOS.NavigationDataUploadStateDelegate)
  func importFile(recordName: Swift.String, delegate: (any NavigationDataRecordIOS.NavigationDateImportStateDelegate)?)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency open class NavigationRecrodDataViewController : UIKit.UIViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate, NavigationDataRecordIOS.NavigationDataUploadStateDelegate, NavigationDataRecordIOS.NavigationDateImportStateDelegate {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor @preconcurrency @objc public func tableView(_ tableView: UIKit.UITableView, editingStyleForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell.EditingStyle
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, shouldShowMenuForRowAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, canPerformAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?) -> Swift.Bool
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, performAction action: ObjectiveC.Selector, forRowAt indexPath: Foundation.IndexPath, withSender sender: Any?)
  @_Concurrency.MainActor @preconcurrency @objc open func tableView(_ tableView: UIKit.UITableView, trailingSwipeActionsConfigurationForRowAt indexPath: Foundation.IndexPath) -> UIKit.UISwipeActionsConfiguration?
  @_Concurrency.MainActor @preconcurrency public func uploadSucce()
  @_Concurrency.MainActor @preconcurrency public func uploadFail(reason: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func reloadData(tableView: UIKit.UITableView)
  @_Concurrency.MainActor @preconcurrency public func replay(recordName: Swift.String)
  @_Concurrency.MainActor @preconcurrency public func analyse(recordName: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency public func importSucess()
  @_Concurrency.MainActor @preconcurrency public func importFailed(reason: Swift.String)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NavigationRecordDataConfig {
  public static func isEnableRecord() -> Swift.Bool
  public static func setRecordState(isEnable: Swift.Bool)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BaseReplayObserver {
  public func resetData()
  @objc deinit
}
public protocol NavigationDateImportStateDelegate {
  func importSucess()
  func importFailed(reason: Swift.String)
}
@objc(NBReplayLocationManager) open class NavReplayLocationManager : NbmapCoreNavigation.NavigationLocationManager {
  @objc public var speedMultiplier: Swift.Double
  weak public var serviceDelegate: (any NbmapCoreNavigation.NavigationServiceDelegate)?
  @objc public var locations: [CoreLocation.CLLocation]! {
    @objc get
    @objc set
  }
  @objc override dynamic open var location: CoreLocation.CLLocation? {
    @objc get
  }
  public init(locations: [CoreLocation.CLLocation], recordName: Swift.String, speedValue: UIKit.UIButton)
  @objc deinit
  @objc override dynamic open func startUpdatingLocation()
  @objc override dynamic open func stopUpdatingLocation()
}
@_hasMissingDesignatedInitializers public class SummaryModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
open class SwiftNavigationData : NavigationDataRecordIOS.NavigationDataDelegate {
  public init()
  public func uploadFile(recordName: Swift.String, uploadStateDelegate: any NavigationDataRecordIOS.NavigationDataUploadStateDelegate)
  public func importFile(recordName: Swift.String, delegate: (any NavigationDataRecordIOS.NavigationDateImportStateDelegate)?)
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NavigationDataLocationObserver : NavigationDataRecordIOS.BaseReplayObserver {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class SpeechEventModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
open class ReplayNavigationEventTracking : NbmapCoreNavigation.NavigationEventTracking {
  public init()
  @objc public func trackingRouteData(route: [Swift.String : Any])
  @objc public func trackingRawLocation(rawLocation: [Swift.String : Any])
  @objc public func trackingSnapLocation(snapLocation: [Swift.String : Any])
  public func trackingAlternativeLocation(location: [Swift.String : Any])
  @objc public func trackingSpoken(sponken: [Swift.String : Any])
  @objc public func trackingBannerInfo(bannerInfo: [Swift.String : Any])
  @objc public func trackingSummary(summary: [Swift.String : Any])
  @objc public func trackingStartReroute(reroute: [Swift.String : Any])
  @objc public func trackingRerouteError(reRouteError: [Swift.String : Any])
  @objc public func trackingRerouteResponse(rerouteResponse: [Swift.String : Any])
  @objc public func trackingNavigationFinish()
  @objc deinit
}
@_hasMissingDesignatedInitializers open class NavigationDataManager {
  public static let dataManager: NavigationDataRecordIOS.NavigationDataManager
  public func initManager(navigationDataDelegate: (any NavigationDataRecordIOS.NavigationDataDelegate)? = SwiftNavigationData())
  public func finishNavigation()
  public func uploadFile(recordName: Swift.String, uploadStateDelegate: any NavigationDataRecordIOS.NavigationDataUploadStateDelegate)
  public func importFile(recordName: Swift.String, importDelegate: any NavigationDataRecordIOS.NavigationDateImportStateDelegate)
  public func getJsonString<T>(obj: T) -> Swift.String where T : Swift.Decodable, T : Swift.Encodable
  public static func pushToRecordPage(navigationController: UIKit.UINavigationController?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BannerUpdateEventModel : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers public class Maneuver : Swift.Codable {
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_hasMissingDesignatedInitializers open class ViewEventType {
  public static let TYPE_ROUTE: Swift.String
  public static let TYPE_LOCATION: Swift.String
  public static let TYPE_SNAP_LOCATION: Swift.String
  public static let TYPE_SPOKEN: Swift.String
  public static let TYPE_BANNER: Swift.String
  public static let TYPE_REROUTE_REQ: Swift.String
  public static let TYPE_SUMMARY: Swift.String
  public static let TYPE_REROUTE_RESP: Swift.String
  public static let TYPE_ALTERNATIVE_LOCATION: Swift.String
  public static let TYPE_REROUTE: Swift.String
  public static let TYPE_REROUTE_RESPONSE: Swift.String
  public static let TYPE_NAVIGATION_FINISHED: Swift.String
  public static let TYPE_REROUTE_ERROR: Swift.String
  @objc deinit
}
public protocol NavigationDataUploadStateDelegate {
  func uploadSucce()
  func uploadFail(reason: Swift.String)
}
